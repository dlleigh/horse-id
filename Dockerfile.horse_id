# Use the AWS Lambda Python 3.11 base image (check latest compatible version)
# For PyTorch, you might consider an image with CUDA if you're using GPU inference (unlikely for Lambda CPU)
# or a base Python image and install torch with CPU-only option.
# AWS also provides base images with common ML libraries pre-installed, e.g., public.ecr.aws/lambda/python:3.11-ml
FROM public.ecr.aws/lambda/python:3.13

# Set working directory in the container
WORKDIR /var/task

# Install system dependencies required by OpenCV (cv2)
# These are common libraries for graphics and X11 that are not in minimal Lambda images.
RUN dnf install -y mesa-libGL libXext libSM libICE libXrender fontconfig git

# Copy your requirements file and install dependencies
COPY horse-id-requirements.txt .

RUN pip install \
    --index-url https://download.pytorch.org/whl/cpu \
    --extra-index-url https://pypi.org/simple \
    -r horse-id-requirements.txt \
    --no-cache-dir \ 
    --target "${LAMBDA_TASK_ROOT}"

# Pre-download the model into a specific cache directory within the image.
RUN python -c "import timm; timm.create_model('hf-hub:BVRA/wildlife-mega-L-384', pretrained=True, cache_dir='/tmp/model_cache')"

# Copy your application code and config file
COPY horse_id.py ${LAMBDA_TASK_ROOT}/
COPY config.yml ${LAMBDA_TASK_ROOT}/

CMD [ "horse_id.horse_id_processor_handler" ]