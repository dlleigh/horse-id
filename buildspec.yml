version: 0.2

# Define environment variables for the build process
env:
  variables:
    # Replace with your AWS account ID and desired region
    AWS_ACCOUNT_ID: "685175429625"
    AWS_DEFAULT_REGION: "us-east-2" # Or your specific region (e.g., us-east-1)
    
    # The name of your ECR repository where both images will be stored
    ECR_REPOSITORY_NAME: "horse-id-lambda-repo"
    
    # Define specific names for the processor and responder images/tags
    PROCESSOR_IMAGE_TAG: "processor-latest"
    RESPONDER_IMAGE_TAG: "responder-latest"

phases:
  pre_build:
    commands:
      # Log in to Amazon ECR
      - echo "Logging in to Amazon ECR..."
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$ECR_REPOSITORY_NAME
      # Define the full URI for the ECR repository
      - REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$ECR_REPOSITORY_NAME

  build:
    commands:
      - echo "Build started on $(date)"
      - echo "Building the horse_id processor Docker image..."
      # Build the processor image and tag it with its specific ECR URI
      - docker build --platform linux/amd64 --file Dockerfile.horse_id -t $ECR_REPOSITORY_NAME:$PROCESSOR_IMAGE_TAG .
      - docker tag $ECR_REPOSITORY_NAME:$PROCESSOR_IMAGE_TAG $REPOSITORY_URI:$PROCESSOR_IMAGE_TAG

      - echo "Building the twilio webhook responder Docker image..."
      # Build the responder image and tag it with its specific ECR URI
      - docker build --platform linux/amd64 --file Dockerfile.responder -t $ECR_REPOSITORY_NAME:$RESPONDER_IMAGE_TAG .
      - docker tag $ECR_REPOSITORY_NAME:$RESPONDER_IMAGE_TAG $REPOSITORY_URI:$RESPONDER_IMAGE_TAG

  post_build:
    commands:
      - echo "Build completed on $(date)"
      - echo "Pushing the Docker image to ECR..."
      # Push both images to ECR
      - docker push $REPOSITORY_URI:$PROCESSOR_IMAGE_TAG
      - docker push $REPOSITORY_URI:$RESPONDER_IMAGE_TAG
      # Removed imagedefinitions.json as it's typically for single-container deployments
      # and not directly applicable to two separate Lambda functions from distinct images.

artifacts:
  # Specify any files that CodeBuild should output after the build (e.g., for CodeDeploy)
  files: [] # No artifacts needed for this multi-image push scenario